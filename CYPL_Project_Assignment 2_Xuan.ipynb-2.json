{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transit Crowding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# download San Francisco transit crowding level data from SFTCA\n",
    "\n",
    "url = 'https://connectsf-transitcrowding.sfcta.org/assets/connectsf/trncrowding.zip'\n",
    "\n",
    "with open('trncrowding.zip', 'wb') as f:\n",
    "    r = requests.get(url)\n",
    "    f.write(r.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the San Francisco transit crowding data as a GeoDataFrame\n",
    "\n",
    "trncrowding = gpd.read_file('zip://trncrowding.zip')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>MODE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>TP</th>\n",
       "      <th>LOAD</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4000</td>\n",
       "      <td>4008</td>\n",
       "      <td>22</td>\n",
       "      <td>40_CBW</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.277</td>\n",
       "      <td>LINESTRING (6065001.695 2130313.85188, 6066666...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4018</td>\n",
       "      <td>4008</td>\n",
       "      <td>22</td>\n",
       "      <td>40_VE</td>\n",
       "      <td>EV</td>\n",
       "      <td>0.049</td>\n",
       "      <td>LINESTRING (6067765.62349 2128408.12983, 60666...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>103456</td>\n",
       "      <td>4008</td>\n",
       "      <td>22</td>\n",
       "      <td>40_CBW</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.129</td>\n",
       "      <td>LINESTRING (6064367.73359 2133807.4221, 606666...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4000</td>\n",
       "      <td>13080</td>\n",
       "      <td>22</td>\n",
       "      <td>40_CBW</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.129</td>\n",
       "      <td>LINESTRING (6065001.695 2130313.85188, 6063748...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4002</td>\n",
       "      <td>4026</td>\n",
       "      <td>18</td>\n",
       "      <td>40_18W</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.000</td>\n",
       "      <td>LINESTRING (6068167.11572 2127707.98838, 60690...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        A      B  MODE    NAME  TP   LOAD  \\\n",
       "0    4000   4008    22  40_CBW  AM  0.277   \n",
       "1    4018   4008    22   40_VE  EV  0.049   \n",
       "2  103456   4008    22  40_CBW  AM  0.129   \n",
       "3    4000  13080    22  40_CBW  AM  0.129   \n",
       "4    4002   4026    18  40_18W  AM  0.000   \n",
       "\n",
       "                                            geometry  \n",
       "0  LINESTRING (6065001.695 2130313.85188, 6066666...  \n",
       "1  LINESTRING (6067765.62349 2128408.12983, 60666...  \n",
       "2  LINESTRING (6064367.73359 2133807.4221, 606666...  \n",
       "3  LINESTRING (6065001.695 2130313.85188, 6063748...  \n",
       "4  LINESTRING (6068167.11572 2127707.98838, 60690...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trncrowding.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "trn_load = trncrowding[['A','B','LOAD','geometry']].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "print(trncrowding.geometry[0])\n",
    "LINESTRING (6065001.695 2130313.85188, 6066666.77451 2130407.24515)\n",
    " \n",
    "I don't understand what does these number means...maybe result from the projection?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transit Analysis Zone\n",
    "The purpose of spatialjoin these two data is to the corwding level of each TAZ. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# download TAZ data from SFTCA\n",
    "\n",
    "url = 'https://www.sfcta.org/sites/default/files/2019-06/TAZ981.zip'\n",
    "\n",
    "with open('TAZ981.zip', 'wb') as f:\n",
    "    r = requests.get(url)\n",
    "    f.write(r.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "taz = gpd.read_file('zip://TAZ981.zip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TAZ</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((6007378.500054573 2086055.37391938, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>POLYGON ((5992137.499592379 2086335.12355164, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>POLYGON ((6004983.499220342 2086750.499936027,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>POLYGON ((5994473.501130554 2087145.000032395,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>POLYGON ((6006265.000917536 2086079.750239403,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   TAZ                                           geometry\n",
       "0    1  POLYGON ((6007378.500054573 2086055.37391938, ...\n",
       "1    2  POLYGON ((5992137.499592379 2086335.12355164, ...\n",
       "2    3  POLYGON ((6004983.499220342 2086750.499936027,...\n",
       "3    4  POLYGON ((5994473.501130554 2087145.000032395,...\n",
       "4    5  POLYGON ((6006265.000917536 2086079.750239403,..."
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taz.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spatial Join Transit Crowding and TAZ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Spatial join transit crowding level data with TAZ \n",
    "\n",
    "merged = gpd.sjoin(taz, trncrowding, how='inner', op='intersects')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'init': 'epsg:2227'}\n",
      "{'init': 'epsg:2227'}\n"
     ]
    }
   ],
   "source": [
    "print(taz.crs)\n",
    "print(trncrowding.crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TAZ</th>\n",
       "      <th>geometry</th>\n",
       "      <th>index_right</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>MODE</th>\n",
       "      <th>NAME</th>\n",
       "      <th>TP</th>\n",
       "      <th>LOAD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((6007378.500054573 2086055.37391938, ...</td>\n",
       "      <td>13286</td>\n",
       "      <td>33605</td>\n",
       "      <td>20375</td>\n",
       "      <td>11</td>\n",
       "      <td>MUN9I</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>POLYGON ((6008496.000471613 2086032.624223359,...</td>\n",
       "      <td>13286</td>\n",
       "      <td>33605</td>\n",
       "      <td>20375</td>\n",
       "      <td>11</td>\n",
       "      <td>MUN9I</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((6007378.500054573 2086055.37391938, ...</td>\n",
       "      <td>13294</td>\n",
       "      <td>20375</td>\n",
       "      <td>33605</td>\n",
       "      <td>11</td>\n",
       "      <td>MUN9O</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>POLYGON ((6008496.000471613 2086032.624223359,...</td>\n",
       "      <td>13294</td>\n",
       "      <td>20375</td>\n",
       "      <td>33605</td>\n",
       "      <td>11</td>\n",
       "      <td>MUN9O</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((6007378.500054573 2086055.37391938, ...</td>\n",
       "      <td>13285</td>\n",
       "      <td>20369</td>\n",
       "      <td>20375</td>\n",
       "      <td>11</td>\n",
       "      <td>MUN9O</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.093</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   TAZ                                           geometry  index_right      A  \\\n",
       "0    1  POLYGON ((6007378.500054573 2086055.37391938, ...        13286  33605   \n",
       "5    6  POLYGON ((6008496.000471613 2086032.624223359,...        13286  33605   \n",
       "0    1  POLYGON ((6007378.500054573 2086055.37391938, ...        13294  20375   \n",
       "5    6  POLYGON ((6008496.000471613 2086032.624223359,...        13294  20375   \n",
       "0    1  POLYGON ((6007378.500054573 2086055.37391938, ...        13285  20369   \n",
       "\n",
       "       B  MODE   NAME  TP   LOAD  \n",
       "0  20375    11  MUN9I  AM  0.110  \n",
       "5  20375    11  MUN9I  AM  0.110  \n",
       "0  33605    11  MUN9O  AM  0.093  \n",
       "5  33605    11  MUN9O  AM  0.093  \n",
       "0  20375    11  MUN9O  AM  0.093  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# One TAZ may have more than one transit line intersect with it. \n",
    "\n",
    "merged_grp= merged.groupby(['TAZ'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "sum_lod=merged_grp['LOAD'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TAZ\n",
       "1    0.770\n",
       "2    1.200\n",
       "3    4.378\n",
       "4    6.640\n",
       "5    0.055\n",
       "Name: LOAD, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_lod.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18230\n",
      "981\n",
      "953\n"
     ]
    }
   ],
   "source": [
    "# The length of merged data is close but smaller than the TAZ one. The reason for that is not every taz zone has a\n",
    "# linestring data goes across it. Thus, I consider this as a sucessful spatial join. \n",
    "\n",
    "print(len(merged))\n",
    "print(len(taz))\n",
    "print(len(sum_lod))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
